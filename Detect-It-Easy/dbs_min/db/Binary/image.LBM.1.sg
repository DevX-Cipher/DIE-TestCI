function detect(){if(File.compare("'FORM'")&&(File.compare("'ILBM'",8)||File.compare("'PBM '",8))){for(sz=File.read_uint32(4,_BE)+8,File.getSize()<sz&&(sVersion="malformed!short"),p=12,end=Math.min(File.getSize(),sz),w=viewportMode=hsx=-1;p<end;){switch(hkhd=File.read_ansiString(p,4),hksz=File.read_uint32(p+4,_BE),p+=8,hkhd){case"BMHD":w=File.read_uint16(p,_BE),h=File.read_uint16(p+2,_BE),x0=File.read_int16(p+4,_BE),y0=File.read_int16(p+6,_BE),numPlanes=File.read_uint8(p+8),mask=File.read_uint8(p+9),co=File.read_uint8(p+10),tcol=File.read_uint16(p+12),xa=File.read_uint8(p+14),ya=File.read_uint8(p+15),pw=File.read_int16(p+16,_BE),ph=File.read_int16(p+18,_BE)
break
case"CAMG":viewportMode=File.read_uint32(p,_BE)
break
case"GRAB":hsx=File.read_int16(p,_BE),hsy=File.read_int16(p+2,_BE)}p+=hksz,hksz%2&&p++}if(w<0)return
if(File.isVerbose()){switch(sOption(w+"x"+h+" ("+x0+","+y0+") ["+pw+"x"+ph+"] AR"+xa+":"+ya),sOption("planes:"+numPlanes),co){case 0:sOption("uncompressed")
break
case 1:sOption("RLE")
break
case 2:sOption("vertical RLE")
break
default:sOption("unk.compression")}2<=mask&&sOption("t.col:"+Hex(tcol)),0<=viewportMode&&sOption(Hex(viewportMode),"view_port_mode:"),0<=hsx&&sOption("hotspot: ("+hsx+","+hsy+")")}bDetected=!0}return result()}init("image","IFF InterLeaved BitMap (.IFF,.LBM)")
